# syntax=docker/dockerfile:1.7
# ---------- Builder ----------
FROM rust:1-bookworm AS builder
WORKDIR /app

# 1) Cache dependency step
#   - Copy manifest dulu, buat dummy main agar cargo build bisa cache deps
COPY backend/Cargo.toml backend/Cargo.lock* ./backend/
RUN mkdir -p backend/src && echo "fn main(){}" > backend/src/main.rs

WORKDIR /app/backend
# Build dengan cache mount (aktif jika DOCKER_BUILDKIT=1)
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/backend/target \
    cargo build --release || true

# 2) Build sebenarnya
COPY backend/ /app/backend/
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/backend/target \
    cargo build --release

# ---------- Runtime ----------
FROM debian:bookworm-slim AS runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
      ca-certificates tzdata curl \
    && rm -rf /var/lib/apt/lists/*
ENV TZ=Asia/Jakarta RUST_LOG=info
WORKDIR /srv

# user non-root
RUN useradd -ms /bin/bash appuser
# sesuaikan nama binary jika berbeda (default "backend")
COPY --from=builder /app/backend/target/release/backend /srv/server
USER appuser

EXPOSE 8080
HEALTHCHECK --interval=15s --timeout=3s --retries=5 \
  CMD curl -fsS http://localhost:8080/health || exit 1
CMD ["./server"]
